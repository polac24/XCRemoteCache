// Copyright (c) 2023 Spotify AB.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import Foundation

enum ArtifactMetaProcessorError: Error {
    /// The prebuild plugin execution was called but the local
    /// path to the artifact directory is unknown
    /// Might happen that the artifact processor didn't invoke
    /// a request to process an artifact
    case artifactLocationIsUnknown
}

/// Processes downloaded artifact by placing an up-to-date and remapped meta file
/// in the artifact directory
class ArtifactMetaUpdater: ArtifactProcessor {
    private var artifactLocation: URL?
    private let metaWriter: MetaWriter
    private let fileRemapper: FileDependenciesRemapper

    init(fileRemapper: FileDependenciesRemapper, metaWriter: MetaWriter) {
        self.metaWriter = metaWriter
        self.fileRemapper = fileRemapper
    }
    
    /// Remembers the artifact location, used later in the plugin
    /// - Parameter url: artifact's root directory
    func process(rawArtifact url: URL) throws {
        // Storing the location of the just downloaded artifact
        // Note, the location might include a meta (generated by producer
        // while compiling and building an artifact), which might be outdated
        // (e.g. a new schema has been applied to the meta format, while artifacts
        // format is backward-compatible)
        artifactLocation = url
    }

    func process(localArtifact url: URL) throws {
        // No need to do anything in the postbuild
    }
}

extension ArtifactMetaUpdater: ArtifactConsumerPrebuildPlugin {

    /// Overrides the meta json file in the downloaded artifact with a meta including
    /// remapped paths
    func run(meta: MainArtifactMeta) throws {
        guard let artifactLocation = artifactLocation else {
            throw ArtifactMetaProcessorError.artifactLocationIsUnknown
        }
        _ = try metaWriter.write(meta, locationDir: artifactLocation)
        // TODO: extract the meta json location logic to a shared class
        let metaURL = artifactLocation
            .appendingPathComponent(meta.fileKey)
            .appendingPathExtension("json")
        try fileRemapper.remap(fromGeneric: metaURL)
    }
}
